{% extends "base.html.jinja" %}
{% block body %}
    <div class="block-body-credits">
        <div class="toast-container position-fixed top-0 end-0 p-3">
            <!-- This template, itself, is invisible. Elements will be created from it via JavaScript. -->
            <template>
                <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header">
                        <img src="{{ url_for("static", path="/favicon.png") }}"
                             class="rounded me-2"
                             alt="NMDC Logo"
                             height="24"
                             width="24">
                        <strong class="me-auto"></strong>
                    </div>
                    <div class="toast-body"></div>
                </div>
            </template>
        </div>
        <span class="alert-container">
            <!-- This template, itself, is invisible. Elements will be created from it via JavaScript. -->
            <template>
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <span class="message"></span>
                    <button type="button"
                            class="btn-close"
                            data-bs-dismiss="alert"
                            aria-label="Close"></button>
                </div>
            </template>
        </span>
        <h1>Credits</h1>
        <p>
            <span>
                {% if name %}
                    Welcome, {{ name }}!
                {% else %}
                    Welcome!
                {% endif %}
            </span>
            <span>Here are the credits you can claim—or have already claimed—for your ORCID profile.</span>
        </p>
        <div>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Credit</th>
                        <th>Claimed at</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="3" class="text-center">
                            <span class="spinner-border spinner-border-lg m-4" aria-hidden="true"></span>
                        </td>
                    </tr>
                    <!-- This template, itself, is invisible. Elements will be created from it via JavaScript. -->
                    <template>
                        <tr>
                            <td></td>
                            <td></td>
                            <td>
                                <button type="button"
                                        class="btn btn-primary btn-sm claim-button"
                                        title="Apply this credit to your ORCID profile">
                                    <span class="spinner-border spinner-border-sm d-none" aria-hidden="true"></span>
                                    <span role="status">Claim</span>
                                </button>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div>
        <script>
            /**
             * Invoke a function once the page—including all dependent resources (e.g. stylesheets, scripts)—has loaded.
             */
            window.addEventListener("load", () => {
                // Get a reference to this template block, to bound (i.e. restrict) the selectors below to this block.
                const blockEl = document.querySelector('.block-body-credits');

                /**
                 * Helper function that adds an alert—having the specified message—to the alert container.
                 */
                const displayAlert = (message) => {
                    const alertContainerEl = blockEl.querySelector(".alert-container");
                    const templateEl = alertContainerEl.querySelector("template");
                    const alertEl = templateEl.content.cloneNode(true);
                    const messageEl = alertEl.querySelector(".message");
                    messageEl.innerHTML = message;
                    alertContainerEl.appendChild(alertEl);
                };

                /**
                * Temporarily show a toast having the specified header text and body text.
                *
                * Reference: https://getbootstrap.com/docs/5.3/components/toasts/
                */
                const showToast = (headerText, bodyText) => {
                    // Get references to the HTML template, fragment, and other elements involved.
                    const toastContainerEl = blockEl.querySelector(".toast-container");
                    const templateEl = toastContainerEl.querySelector("template");
                    const toastFragment = templateEl.content.cloneNode(true);
                    const headerEl = toastFragment.querySelector(".toast-header > strong");
                    const bodyEl = toastFragment.querySelector(".toast-body");

                    // Set the header text and body text.
                    headerEl.textContent = headerText;
                    bodyEl.textContent = bodyText;

                    // Add the toast to the container element, then get the toast as an _element_.
                    // Note: Bootstrap's `Toast` constructor does not work when passed a fragment.
                    toastContainerEl.appendChild(toastFragment);
                    const toastEl = toastContainerEl.lastElementChild;

                    // Configure the toast to be removed from the DOM once it's hidden from view.
                    // Note: This is in an attempt to prevent memory leaks.
                    toastEl.addEventListener("hidden.bs.toast", () => {
                        toastContainerEl.removeChild(toastEl);
                    });

                    // Bootstrap-ify the toast and show it.
                    const bootstrapToast = new bootstrap.Toast(toastEl);
                    bootstrapToast.show();
                };

                /**
                 * Helper function that formats the specified timestamp as a string.
                 *
                 * Note: The format of the string depends upon the user's locale. For example,
                 *       in the "en-US" locale, the format is "May 1, 2025 at 1:23 PM".
                 *
                 * Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat
                 */
                const formatTimestamp = (rawTimestamp) => {
                    // Note: We pass `undefined` as the locale, so the formatter uses the web browser's default locale.
                    const dateTimeFormatter = new Intl.DateTimeFormat(undefined, {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                        hour: "numeric",
                        minute: "2-digit",
                    });
                    const date = new Date(rawTimestamp.trim());
                    if (!isNaN(date.valueOf())) {
                        return dateTimeFormatter.format(date);
                    } else {
                        return "";
                    }
                };

                /**
                 * Helper function that formats the specified combination of timestamps
                 * as a string whose format resembles the format ORCID would use when
                 * displaying an affiliation having those same start and end dates.
                 *
                 * Note: Through experimentation, we found that ORCID uses these formats:
                 *       1. "1999-01-01 to 2025-12-31", when both dates are defined
                 *       2. "1999-01-01 to present", when only the start date is defined
                 *       3. "2025-12-31", when only the end date is defined
                 *       4. "", when neither date is defined
                 *
                 *       In the case of this function, the format of the _date_ portion(s)
                 *       of the string depends upon the web browser's default locale. For
                 *       example, if the web browser's default locale is "en-US", the
                 *       _date_ portion(s) of the string will be formatted as "12/31/2025",
                 *       not as "2025-12-31".
                 */
                const formatDateRange = (startTimestamp = "", endTimestamp = "") => {
                    // Note: We pass `undefined` as the locale, so the formatter uses the web browser's default locale.
                    const dateTimeFormatter = new Intl.DateTimeFormat(undefined, {
                        year: "numeric",
                        month: "2-digit",
                        day: "2-digit",
                    });
                    const startDate = new Date(startTimestamp.trim());
                    const endDate = new Date(endTimestamp.trim());
                    const hasStartDate = !isNaN(startDate.valueOf());
                    const hasEndDate = !isNaN(endDate.valueOf());
                    if (hasStartDate && hasEndDate) {
                        return `${dateTimeFormatter.format(startDate)} to ${dateTimeFormatter.format(endDate)}`;
                    } else if (hasStartDate && !hasEndDate) {
                        return `${dateTimeFormatter.format(startDate)} to present`;
                    } else if (!hasStartDate && hasEndDate) {
                        return dateTimeFormatter.format(endDate);
                    } else {
                        return "";
                    }
                };

                /**
                 * Helper function that disables all claim buttons.
                 */
                const disableClaimButtons = () => {
                    blockEl.querySelectorAll("button.claim-button").forEach((el) => {
                        el.setAttribute("disabled", "");
                    });
                };

                /**
                 * Helper function that enables all claim buttons.
                 */
                const enableClaimButtons = () => {
                    blockEl.querySelectorAll("button.claim-button").forEach((el) => {
                        el.removeAttribute("disabled");
                    });
                };

                /**
                 * Callback function that claims a credit via the API and manages UI state accordingly.
                 */
                const handleClaimCredit = async (buttonEl, creditType, startDate, endDate) => {
                    // Disable all claim buttons.
                    disableClaimButtons();

                    // Display a spinner on the clicked button.
                    buttonEl.querySelector("span.spinner-border").classList.remove("d-none");

                    try {
                        const url = "{{ url_for('post_api_credits_claim') }}";
                        const response = await fetch(url, {
                            method: "POST",
                            headers: {"Content-Type": "application/json"},
                            body: JSON.stringify({
                                credit_type: creditType,
                                start_date: startDate,
                                end_date: endDate,
                            }),
                        });
                        if (response.ok) {
                            const json = await response.json();
                            displayCredits(json["credits"]);
                            showToast("Claimed", "Credit claimed successfully.");
                        } else {
                            throw new Error(`Response status: ${response.status}`);
                        }
                    } catch (error) {
                        console.error(error);
                        displayAlert("Failed to claim credit. Reload the page and try again.");
                    }

                    // Hide the spinner from the clicked button.
                    buttonEl.querySelector("span.spinner-border").classList.add("d-none");

                    // Re-enable all claim buttons.
                    enableClaimButtons();
                };

                /**
                 * Helper function that updates the credits table to display the specified credits.
                 */
                const displayCredits = (credits) => {
                    const tableBodyEl = blockEl.querySelector("table > tbody");
                    tableBodyEl.querySelectorAll("tr").forEach((rowEl) => {
                        tableBodyEl.removeChild(rowEl);
                    });
                    credits.forEach((credit) => {
                        // Create a table row for this credit.
                        const templateEl = tableBodyEl.querySelector("template");
                        const rowEl = templateEl.content.cloneNode(true);

                        // Populate the cells in this row.
                        const cells = rowEl.querySelectorAll("td");
                        const creditType = credit["column.CREDIT_TYPE"];
                        const startDate = credit["column.START_DATE"];
                        const endDate = credit["column.END_DATE"];
                        const dateRange = formatDateRange(startDate, endDate);
                        const creditUrl = credit["column.DETAILS_URL"];
                        const claimedAt = formatTimestamp(credit["column.CLAIMED_AT"]);
                        const isClaimed = claimedAt !== "";
                        cells[0].innerHTML = creditType;
                        cells[0].innerHTML += dateRange === "" ? "" : `<br /><span class="small text-muted">${dateRange}</span>`;
                        cells[0].innerHTML += creditUrl === "" ? "" : `<br /><a href="${creditUrl}" target="_blank" class="text-decoration-none small">Details <i class="bi bi-box-arrow-up-right"></i></a>`;
                        cells[1].innerHTML = claimedAt;
                        if (isClaimed) {
                            cells[2].innerHTML = "<span>None</span>";
                        } else {
                            // Set up the claim button.
                            const buttonEl = cells[2].querySelector("button");
                            buttonEl.addEventListener("click", (event) => handleClaimCredit(event.currentTarget, creditType, startDate, endDate));
                            cells[2].innerHTML = "";
                            cells[2].appendChild(buttonEl);
                        }

                        tableBodyEl.appendChild(rowEl);
                    });
                };

                /**
                 * Fetches credits from the API and displays them on the web page.
                 */
                const fetchCredits = async () => {
                    const url = "{{ url_for('get_api_credits') }}";
                    try {
                        const response = await fetch(url);
                        if (response.ok) {
                            const json = await response.json();
                            displayCredits(json["credits"]);
                        } else {
                            throw new Error(`Response status: ${response.status}`);
                        }
                    } catch (error) {
                        console.error(error.message);
                        displayAlert("Failed to load credits. Reload the page to try again.");
                    }
                };

                // Fetch credits from the API and display them.
                fetchCredits();
            });
        </script>
    </div>
{% endblock %}
